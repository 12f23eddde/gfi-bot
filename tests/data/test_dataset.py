from datetime import datetime, timezone
from gfibot.collections import *
from gfibot.data.dataset import *


gfi_labels = [
    "good first issue",
    "good-first-issue",
    "easy",
    "Easy",
    "low hanging fruit",
    "low-hanging-fruit",
    "minor bug",
    "Easy Pick",
    "easy pick",
    "Easy pick",
    "Easy to Fix",
    "Easy-fix",
    "easy-fix",
    "EasyToFix",
    "help-wanted-easy",
    "effort: easy",
    "easy-pick",
    "Difficulty: Easy",
    "easy fix",
    "Easy to implement",
    "Effort: Easy",
    "EASY",
    "good first bug",
    "beginner",
    "good first contribution",
    "Good first task",
    "newbie",
    "starter bug",
    "beginner-task",
    "beginner-friendly",
    "d. Beginner",
    "exp: beginner",
    "good for beginner",
    "Good for Beginners",
    "Difficulty: beginner",
    "Minor Bug",
    "easy-pick",
    "minor feature",
    "help wanted (easy)",
    "up-for-grabs",
    "good-first-bug",
    "good-first-contribution",
    ":wave: Good First Issue",
    "first-timer",
    "first PR",
    "Effort Low",
    "type: bug (minor)",
    "Good First Issue",
    "Good First Task",
    "first-timers-only",
    "Good first issue",
    "good first issue (taken)",
    "first timers welcome",
    "Good first issue :mortar_board:",
    "Good First Issue :wave:",
    "Good as first PR",
    "First-Time-Issue",
    # "gsoc first issue",
    "good-first-issue",
    "Low-Hanging Fruit",
    "type: feature (minor)",
    "bug: minor",
    "feature: minor",
    "semver-minor",
    "minor",
    "low fruit",
    "Difficulty Novice",
    "starter project",
    "starter issue",
    "Difficulty: starter",
    "difficulty: starter",
    "Project-specific starter issue",
    "starter",
    "starter bug",
    "Starter bug",
]
bug_labels = [
    "bug",
    "Bug",
    "t/bug :bug:",
    "[Type] Bug",
    "<Bug>",
    ">bug",
    "type: bug",
    "confirmed-bug",
    "Potential Bug",
    "confirmed bug",
    "type: bug (minor)",
    "type - bug",
    "original bug",
    "t/bug",
    "Type: Bug",
    "good first bug",
    ":beetle: type: bug",
    "good-first-bug",
    "Type: Bug Report",
    "potential bug",
    "Bug Report",
    "BUG",
    "Issue-Bug",
    "Minor Bug",
    "bug: minor",
    "type: bug (major)",
    "type:Bug",
    "test bug",
    "Bug Bash",
    "minor bug",
    "üè∑ type: bug",
    "bug: major",
    "type: bug :beetle:",
    "I-bug",
    "Type: Bug :bug:",
    "status: confirmed bug",
    "type: bug üêõ",
    ":bug: Bug",
    "bug report",
    "bug üêõ",
    "Docs Bug",
    "Confirmed bug",
    "kind: bug",
    "bug bash",
    "major bug",
    "data file bug",
    "AI bug",
    "Serious Bug",
    "starter bug",
    "C-bug",
    "Starter bug",
    "apibug",
    "bug :bug:",
    "Bug: triage",
    "bug ü§π\u200d‚ôÇÔ∏è",
    "[Type] WP Core Bug",
    "Bug :bug:",
    "bug: confirmed",
    "bug-publishing",
    "<Bugfix>",
    "t: bug üêõ",
    "Bug Fix",
    "good contrib bug",
]
test_labels = [
    "test",
    ">test-failure",
    "tests",
    "Needs Tests",
    "Testing",
    "Tests",
    "Needs Testing",
    "CI / flaky test",
    "Test",
    "testing",
    "v-test",
    "failed-test",
    "test bug",
    "Test Improvement",
    "area: testing-infrastructure",
    ">test",
    "Unreliable Test",
    "Area-Test",
    "feature-unit-testing",
    "Automated Testing",
    "smoke-test",
    "area: testing-coverage",
    "üî©Test Infrastructure",
    "needs unit test",
    "test failure",
    "integration-test",
    "team: refactoring and unit tests (@BenHenning)",
    "unit-testing",
    "new-test-script",
    "new test script",
    "Code: Tests",
]
build_labels = [
    "CI",
    "CI / flaky test",
    "Testing / Continuous Integration (CI)",
    "Build / CI",
    "build",
    "Build",
    "Build system",
    ":Core/Infra/Build",
    "Area-Build",
    ":Core/Build",
    "build-system",
    "build system",
    ":Delivery/Build",
    "Build Tooling",
    "build/tooling",
    "[Type] Build Tooling",
    "Code: Build",
    "Component: Build & Tooling",
    "Component: Build Infrastructure",
]
doc_labels = [
    "documentation",
    "Documentation",
    "doc",
    "Docs",
    "docs",
    "Documentation",
    "documentation",
    ">docs",
    "area: documentation (user)",
    "Docs and Output",
    "docs-requested",
    "area: documentation (api and integrations)",
    "<Documentation>",
    "üè∑ type: documentation",
    "Docs Request",
    "Component: Documentation & Website",
    "area: documentation (developer)",
    "Documentation Request",
    "Docs Bug",
    "area: documentation (production)",
    "docs/generated",
    "Team:Docs",
    "Documentation :book:",
    "tag:Documentation",
    "DOC",
    "TODO: tech (design doc)",
    "Doc Request",
    "category - doc",
    "t/docs",
    "submitty.org / documentation",
    "[Type] Documentation",
    "Documentation Lockdown",
    "needs design doc",
    "area/docs",
    "Area-Documentation",
    "[Component] Document Outline",
    "Inline documentation",
    "javadoc",
    "needs-breaking-change-doc-created",
    ":Nested Docs",
    ":Docs",
    "Documentation: needs merge to stable",
    ":no_entry_sign:Docs",
    "scope: docs",
    "status: needs docs review",
    "cat:Documentation",
    "component:Document Registry",
    "Domain: JSDoc",
    "impact: docs",
    "a/docs",
    "documentation (api and integrations)",
    "area: documentation",
    "I-docs",
    # "release_note:enhancement",
]
enhance_labels = [
    "enhancement",
    "Enhancement",
    "[Type] Enhancement",
    "type: enhancement",
    ">enhancement",
    "t/enhancement ‚ûï",
    "<Enhancement / Feature>",
    "t/enhancement",
    "type: feature or enhancement",
    "type:Enhancement",
    "Issue-Enhancement",
    "Type: Enhancement",
    "type - enhancement",
    "release_note:enhancement",
    "kind: enhancement",
    "Type-Enhancement",
    "status: enhancement",
    "t: enhancement",
    "enhancement / feature request",
    "changelog: enhancement",
    "test enhancement",
    "Experience Enhancement",
    "kind/enhancement",
]
coding_labels = ["coding", "Coding", "TODO: coding", "programming"]
feature_labels = [
    "feature-request",
    "feature",
    "Feature",
    "feature request",
    "Feature Request",
    "type: feature request",
    "Feature:Logs UI",
    "Feature:TSVB",
    "Feature:Metrics UI",
    "type: feature (minor)",
    "New Language Feature - Nullable Reference Types",
    "<Enhancement / Feature>",
    "type: feature (important)",
    "[Feature] Inserter",
    "feature: dav",
    "Feature:Alerting",
    "feature: ldap",
    "[Feature] Rich Text",
    "[Feature] Reusable Blocks",
    "New Language Feature - Local Functions",
    "type: feature or enhancement",
    "New feature",
    "feature: important",
    "feature-inspections",
    "[Feature] Full Site Editing",
    ">feature",
    ":Core/Features/Watcher",
    "New Feature - IOperation",
    "feature: files",
    "minor feature",
    ":Core/Features/Ingest",
    "Type: Feature Request",
    "new feature",
    "New Language Feature - Tuples",
    "Feature:Observability Landing - Milestone 1",
    "Feature:XYAxis",
    "feature: settings",
    "t/feature",
    "Feature:ElasticCharts",
    "feature: theming",
    "feature: minor",
    "Type: New Feature :heavy_plus_sign:",
    "Feature:Custom Links",
    "Feature:Observability Landing",
    "Feature:Vislib",
    ":rocket: Feature Request",
    "feature: install and update",
    "[Feature] Writing Flow",
    "[Feature] Themes",
    "Team:Core/Features",
    "Feature:Plugins",
    "Feature:Custom Actions",
    "feature: users and groups",
    "type: feature",
    "Feature request",
    "[Feature] Raw Handling",
    "[Feature] Patterns",
    "[Feature] Blocks",
    "New Language Feature - Pattern Matching",
    ":Core/Features/Monitoring",
    "Feature:Discover",
    "Feature:Vis Editor",
    "üè∑ type: feature",
    "kind: feature",
    "feature: sharing",
    "feature: authentication",
    "feature-smart-indenter",
    "core feature",
    "[Feature] Permalink",
    "[Feature] UI Components",
    "New Language Feature - Records",
    ":Core/Features/Java High Level REST Client",
    "Feature:EPM",
    "Feature:Fleet",
    "Feature:APM Agent Configuration",
    "New Feature",
    "feature: contacts menu",
    "feature: filesystem",
    "feature-code-explorer",
    "feature-settings",
    "feature-inspection-quickfixes",
    "major feature",
    "[Feature] Block Navigation",
    "[Feature] Style Variations",
    "[Feature] Drag and Drop",
    "[Feature] Widgets Screen",
    "[Feature] Extensibility",
    "[Feature] Site Editor",
    "New Language Feature - Ref Locals and Returns",
    ":Core/Features/CAT APIs",
    ":Core/Features/Java Low Level REST Client",
    "Feature:Visualizations",
    "Feature:Task Manager",
    "Feature:Anomaly Detection",
    "Feature:Service Maps",
    "Feature:Endpoint",
    "Feature:Dashboard",
    "Feature:NP Migration",
    "Feature:Lens",
    "Feature:APM alerting",
    "Feature:EventLog",
    "Feature:Pie Chart",
    "Feature:Logging",
    "feature: search",
    "feature: tags",
    "feature: comments",
    "feature: apps management",
    "feature: workflows",
    "feature: external storage",
    "feature: locking",
    "feature-annotations",
    "New Language Feature - Readonly References",
    "[Feature] Nested / Inner Blocks",
    "[Feature] REST API Interaction",
    "[Feature] Code Editor",
    "[Feature] Block API",
    "[Feature] Block Directory",
    "[Feature] Design Tools",
    "[Feature] Block settings menu",
    "New Feature - Source Generators",
    ":New Feature",
    "Feature:Coordinate Map",
    "Feature:Rollups",
    "Feature:New Platform",
    "Feature:Dependencies",
    "Feature:Data Frame Analytics",
    "Feature:SharingURLs",
    "Feature:Input Control",
    "Feature:UIActions",
    "Feature:Filters",
    "Feature:Timelion",
    "Type: Feature",
    "feature: logging",
    "feature: scss",
    "feature: activity and notification",
    "feature: language l10n and translations",
    "feature: trashbin",
    "feature: filepicker",
    "Feature:FieldFormatters",
    "Feature:Search Profiler",
]
major_labels = [
    "important",
    "type: feature (important)",
    "feature: important",
    "Important",
    "type: bug (major)",
    "bug: major",
    "p2 - major",
    "major bug",
    "major",
    "major feature",
    "severity: major",
    "Serious Bug",
    "core",
    "Core",
    ":Core/Infra/Core",
    ":Core/Infra/Build",
    ":Core/Build",
    ":Core/Infra/Packaging",
    ":Core/Features/Watcher",
    "Core Team",
    ":Core/Features/Ingest",
    "difficult",
    "Difficulty: Hard",
    "breaking",
    "Breaking Change",
    "Breaking-Change",
    "breaking-change",
    "breaking-java",
    "breaking change",
    "priority: high",
    "p1 - priority",
    "high priority",
    "Priority High",
    "Priority: High",
    "[Priority] High",
    "High Priority",
    "Priority: Critical",
    "priority - high",
]
medium_labels = [
    "Effort Medium",
    "Medium Severity",
    "Priority: Medium",
    "priority: medium",
    "medium",
    "Priority-Medium",
    "medium priority",
    "severity-medium",
    "Difficulty: Medium",
    "p. Medium",
    "(P3 - Medium)",
    "effort/medium",
    "Priority Medium",
    "Difficulty: medium",
    "Priority: 3 - Medium :unamused:",
    "medium difficult",
    "impact:medium",
    "Prio-medium",
    "Difficulty Intermediate",
    "intermediate",
    "exp: intermediate",
    "difficulty: intermediate",
    "intermediate-task",
]
untriaged_labels = [
    "untriaged",
    "needs-triage",
    "Needs Triage",
    "status/needs-triage",
    "needs triage",
    "0. Needs triage",
    "status: triage needed",
    "needs:triage",
    "triage_needed",
    "Needs: Triage :mag:",
    "status: needs triage",
    "Needs: Triage",
    "status: needs help for triage",
    "no triage",
]
triaged_labels = [
    "triaged",
    "triage",
    "Bug: triage",
    "hasPR",
    "Has fix",
    "has-pr",
    "has PR",
    "Has PR",
    "in-progress",
    "in progress",
    "fix in progress",
    "[Status] In Progress",
    "waffle:in progress",
    "[zube]: In Progress",
    "waffle:progress",
    "status: in progress",
    "State: Work In Progress",
    "status/in-progress",
    "work in progress",
    "status: fix in progress",
    "fixed but not closed",
    "Fixed",
    "Resolution-Fixed",
    "fixed-pls-verify",
    "fixed",
    "Resolution: Fixed",
    ":confetti_ball:Fixed",
    "Fixed in 2.3.x",
    "wontfix",
    "Resolution: Wontfix",
    "status: wontfix",
]


def test_utils():
    assert count_code_snippets(None) == 0
    assert count_code_snippets("") == 0
    assert count_code_snippets("```code```") == 1
    assert count_code_snippets("```code```\n```code```") == 2
    assert count_code_snippets("```code``````code``````code```") == 3

    assert delete_code_snippets(None) == ""
    assert delete_code_snippets("") == ""
    assert delete_code_snippets("```code```") == ""
    assert delete_code_snippets("```code```\n```code```") == "\n"
    assert delete_code_snippets("```code``````code``````code```") == ""

    assert count_urls(None) == 0
    assert count_urls("") == 0
    assert count_urls("http://example.com") == 1
    assert count_urls("https://example.com\nhttp://example.com") == 2
    assert count_urls("https://example.com jpeg\nhttp://example.com/a.jpeg") == 1

    assert delete_urls(None) == ""
    assert delete_urls("") == ""
    assert delete_urls("http://example.com") == ""
    assert delete_urls("https://example.com\nhttp://example.com") == "\n"
    assert (
        delete_urls("https://example.com jpeg\nhttp://example.com/a.jpeg") == " jpeg\n"
    )

    assert count_imgs(None) == 0
    assert count_imgs("") == 0
    assert count_imgs("http://example.com") == 0
    assert count_imgs("https://example.com\nhttp://example.com") == 0
    assert count_imgs("https://example.com jpeg\nhttp://example.com/a.jpeg") == 1

    assert count_text_len(None) == 0
    assert count_text_len("") == 0
    assert count_text_len("abc") == 1
    assert count_text_len("abc abc") == 2
    assert count_text_len("abc   abc") == 2


def test_label_categorization():
    label_cats = {
        "gfi": gfi_labels,
        "bug": bug_labels,
        "test": test_labels,
        "build": build_labels,
        "doc": doc_labels,
        "enhance": enhance_labels,
        "coding": coding_labels,
        "feature": feature_labels,
        "major": major_labels,
        "medium": medium_labels,
        "untriaged": untriaged_labels,
        "triaged": triaged_labels,
    }
    for cat, labels in label_cats.items():
        for label in labels:
            assert getattr(get_categorized_labels([label]), cat) == 1
        assert getattr(get_categorized_labels(labels), cat) == len(labels)


def test_get_user_data(mock_mongodb):
    user = get_user_data("owner", "name", "a1", datetime.now(timezone.utc))
    assert user.name == "a1"
    assert user.n_commits == 1
    assert user.n_issues == 2
    assert user.n_pulls == 1
    assert sorted(user.resolver_commits) == [0, 1]


def test_get_background_data(mock_mongodb):
    contribs, n_closed, n_open, cls_time = get_background_data(
        "owner", "name", datetime.now(timezone.utc)
    )
    assert contribs == {"a1"}
    assert n_closed == 2
    assert n_open == 0
    assert cls_time == [86400.0, 86400.0]


def test_get_dynamics_data(mock_mongodb):
    issue = ResolvedIssue.objects(name="name", owner="owner", number=2).first()
    print(issue.to_json(indent=2))
    labels, comments, comment_users, event_users = get_dynamics_data(
        "owner", "name", issue.events, datetime.now(timezone.utc)
    )
    print(labels, comments, comment_users, event_users)
    assert labels == ["bug"]
    assert comments == ["a comment"]
    assert comment_users[0].name == "a2"
    assert {u.name for u in event_users} == {"a1", "a2"}


def test_get_dataset(mock_mongodb):
    for resolved_issue in ResolvedIssue.objects():
        d1 = get_dataset(resolved_issue, resolved_issue.resolved_at)
        d2 = get_dataset(resolved_issue, resolved_issue.created_at)
        print(d1.to_json(indent=2))
        print(d2.to_json(indent=2))
